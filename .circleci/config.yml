version: 2.1

commands:
  install_dep:
    steps:
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run: 
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  destroy-environment:
    description: app cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string 
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "mkdocs-<< parameters.Workflow_ID >>"
  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail 
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state 
            if (( $SUCCESS == 1 )); 
            then
            fi
jobs:
  linkcheck-mkdocs:
    docker:
      - image: python:3.7.15
    steps:
      - checkout
      - install_dep
      - run:
          name: Mkdocs linkcheck
          command: |
            if [[ `mkdocs-linkcheck docs  | grep "Broken" | awk {'print $3'}` -eq 0 ]]
            then
              exit 0
            else
              exit 1
            fi   

  build-mkdocs:
    docker:
      - image: python:3.7.15
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Build mkdocs static page
          command: |
            mkdocs build
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  deploy-infra:
    docker:
      - image: python:3.7.15
    steps:
      - checkout
      - run:
          name: Mkdocs linkcheck
          command: |
            if [[ `mkdocs-linkcheck docs  | grep "Broken" | awk {'print $3'}` -eq 0 ]]
            then
              exit 0
            else
              exit 1
            fi  
  run-migrations:
    docker:
      - image: python:3.7.15
    steps:
      - checkout
      - run:
          name: Mkdocs linkcheck
          command: |
            if [[ `mkdocs-linkcheck docs  | grep "Broken" | awk {'print $3'}` -eq 0 ]]
            then
              exit 0
            else
              exit 1
            fi  
  deploy-mkdocs:
    docker:
      - image: python:3.7.15
    steps:
      - checkout
      - run:
          name: Mkdocs linkcheck
          command: |
            if [[ `mkdocs-linkcheck docs  | grep "Broken" | awk {'print $3'}` -eq 0 ]]
            then
              exit 0
            else
              exit 1
            fi  
  smoke-test:
    docker:
      - image: python:3.7.15
    steps:
      - checkout
      - run:
          name: Mkdocs linkcheck
          command: |
            if [[ `mkdocs-linkcheck docs  | grep "Broken" | awk {'print $3'}` -eq 0 ]]
            then
              exit 0
            else
              exit 1
            fi    
  cloudfront-update:
    docker:
      - image: python:3.7.15
    steps:
      - checkout
      - run:
          name: Mkdocs linkcheck
          command: |
            if [[ `mkdocs-linkcheck docs  | grep "Broken" | awk {'print $3'}` -eq 0 ]]
            then
              exit 0
            else
              exit 1
            fi  
  clean-up:
    docker:
      - image: python:3.7.15
    steps:
      - checkout
      - run:
          name: Mkdocs linkcheck
          command: |
            if [[ `mkdocs-linkcheck docs  | grep "Broken" | awk {'print $3'}` -eq 0 ]]
            then
              exit 0
            else
              exit 1
            fi  


workflows:
  default:
    jobs:
      - linkcheck-mkdocs
      - build-mkdocs:
          requires: [linkcheck-mkdocs]
      - deploy-infra:
          requires: [build-mkdocs]
          filters:
            branches:
              only: [main]
      - run-migrations:
          requires: [deploy-infra]
      - deploy-mkdocs:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-mkdocs]
      - cloudfront-update:
          requires: [smoke-test]
      - clean-up:
          requires: [cloudfront-update]


